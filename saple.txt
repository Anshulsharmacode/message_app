import UserModel from "@/model/user";
import bcrypt from "bcryptjs";
import dbconnect from "@/lib/db";
import { NextAuthOptions } from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import { Types } from "mongoose";

interface UserDocument {
    _id: Types.ObjectId;
    email: string;
    username: string;
    password: string;
    isVerified: boolean;
    isAcceptiveMessage: boolean;
}

export const authOption: NextAuthOptions = {
    providers: [
        CredentialsProvider({
            id: "credentials",
            name: "Credentials",
            credentials: {
                identifier: {
                    label: "Email or Username",
                    type: "text",
                    placeholder: "jsmith"
                },
                password: {
                    label: "Password",
                    type: "password",
                    placeholder: "********"
                }
            },
            async authorize(credentials) {
                if (!credentials?.identifier || !credentials?.password) {
                    throw new Error("Missing credentials");
                }
                
                await dbconnect();
                try {
                    const user = await UserModel.findOne({
                        $or: [
                            { email: credentials.identifier },
                            { username: credentials.identifier }
                        ]
                    }).select('+password').lean();

                    if (!user) {
                        throw new Error("User not found");
                    }

                    if (!user.isVerified) {
                        throw new Error("User is not verified");
                    }

                    const passwordCorrect = await bcrypt.compare(credentials.password, user.password);

                    if (passwordCorrect) {
                        // Ensure we return both id and _id for compatibility
                        return {
                            id: user._id.toString(),
                            _id: user._id.toString(),
                            email: user.email,
                            username: user.username,
                            isVerified: user.isVerified,
                            isAcceptiveMessage: user.isAcceptiveMessage
                        };
                    } else {
                        throw new Error("Invalid password");
                    }
                } catch (error) {
                    console.error("Auth error:", error);
                    throw error;
                }
            }
        })
    ],
    callbacks: {
        async jwt({ token, user, trigger, session }) {
            if (trigger === "update" && session) {
                // Handle session updates
                return { ...token, ...session.user };
            }
            
            if (user) {
                // Ensure both id and _id are set
                token.id = user.id || user._id;
                token._id = user._id || user.id;
                token.isVerified = user.isVerified;
                token.isAcceptiveMessage = user.isAcceptiveMessage;
                token.username = user.username;
                token.email = user.email;
            }
            return token;
        },
        async session({ session, token }) {
            if (session.user && token) {
                session.user.id = token.id || token._id;
                session.user._id = token._id || token.id;
                session.user.isVerified = token.isVerified;
                session.user.isAcceptiveMessage = token.isAcceptiveMessage;
                session.user.username = token.username;
                session.user.email = token.email;
            }
            return session;
        }
    },
    pages: {
        signIn: "/signin",
    },
    session: {
        strategy: "jwt",
        maxAge: 30 * 24 * 60 * 60, // 30 days
    },
    secret: process.env.NEXTAUTH_SECRET,
}